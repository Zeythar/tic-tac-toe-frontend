/* Styles converted from Tailwind utilities to component-scoped SCSS */
/* CSS animations matching React motion/framer-motion timings exactly */

/* Keyframe animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.home-container {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  /* React motion: duration 0.5s */
  animation: fadeInUp 0.5s ease-out forwards;
}

/* Ensure the component host and container can take full width so cards
   using 100% will actually fill the available space at the md breakpoint */
:host {
  display: block;
  width: 100%;
}

.home-header {
  text-align: center;
  margin-bottom: 3rem; /* mb-12 */
}

.title {
  color: #ffffff;
  font-size: 2rem;
  font-weight: 600;
  margin-bottom: 1rem; /* mb-4 */
  /* React motion: delay 0.2s */
  animation: fadeInDown 0.4s cubic-bezier(0.2, 0.8, 0.2, 1) 0.2s both;
}

.subtitle {
  color: #bfdbfe; /* blue-200 approx */
  /* React motion: delay 0.3s */
  animation: fadeIn 0.4s cubic-bezier(0.2, 0.8, 0.2, 1) 0.3s both;
}

.modes-grid {
  display: grid;
  gap: 1.5rem; /* gap-6 */
  grid-template-columns: 1fr;

  @media (min-width: 768px) {
    grid-template-columns: repeat(3, 1fr); /* md:grid-cols-3 */
    /* Allow grid children to shrink properly and let cards use full width */
    min-width: 0;
  }
}

.mode-card {
  /* React motion: delay 0.4 + index * 0.1 (set via inline style) */
  animation: fadeInUp 0.5s cubic-bezier(0.2, 0.8, 0.2, 1) both;
  transform: translateZ(0);

  @media (min-width: 768px) {
    width: 100%;
  }

  /* defensive: ensure cards don't force the grid to overflow */
  @media (min-width: 768px) {
    .modes-grid,
    .mode-card {
      min-width: 0;
    }
    .home-container {
      max-width: none;
      width: 100%;
      padding-left: 1rem;
      padding-right: 1rem;
    }
  }
}

.card {
  position: relative;
  overflow: hidden;
  cursor: pointer;
  border-radius: 1rem; /* rounded-2xl */
  background: rgba(255, 255, 255, 0.1); /* bg-white/10 */
  backdrop-filter: blur(8px); /* backdrop-blur-lg */
  border: 1px solid rgba(255, 255, 255, 0.2); /* border-white/20 */
  transition: transform 300ms ease, box-shadow 200ms ease;

  &:hover {
    transform: scale(1.05);
  }

  &.disabled {
    cursor: not-allowed;
    opacity: 0.5;
    pointer-events: none;

    &::before {
      content: '';
      position: absolute;
      inset: 0;
      background: rgba(128, 128, 128, 0.4);
      z-index: 1;
      pointer-events: none;
    }

    &:hover {
      transform: none;
    }

    .icon-wrap {
      opacity: 0.6;
    }
  }
}

.card-inner {
  position: relative;
  z-index: 2;
}

.icon-wrap {
  width: 4rem; /* w-16 */
  height: 4rem; /* h-16 */
  border-radius: 0.75rem; /* rounded-2xl */
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 1rem; /* mb-4 */
  transition: transform 300ms ease;
}

.icon {
  width: 32px; /* w-8 */
  height: 32px; /* h-8 */
  color: white;
}

.card:hover .icon-wrap {
  transform: scale(1.1);
}

.mode-title {
  color: #ffffff;
  margin-bottom: 0.5rem; /* mb-2 */
}

.mode-desc {
  color: #bfdbfe; /* blue-200 */
  font-size: 0.875rem; /* text-sm */
}

.card-overlay {
  position: absolute;
  inset: 0;
  background: linear-gradient(
    to bottom right,
    rgba(255, 255, 255, 0) 0%,
    rgba(255, 255, 255, 0.05) 100%
  );
  opacity: 0;
  transition: opacity 300ms ease;
  pointer-events: none;
}

.card:hover .card-overlay {
  opacity: 1;
}
